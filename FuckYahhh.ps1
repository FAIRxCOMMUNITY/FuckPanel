$payload = 'W0NvbnNvbGVdOjpPdXRwdXRFbmNvZGluZyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjgNCiRob3N0LlVJLlJhd1VJLldpbmRvd1RpdGxlID0gIkNoZWF0RnVja2VyIC0gQEZBSVJ4IENPTU1VTklUWSINCg0KJHRhcmdldERpcnMgPSBAKA0KICAgICJDOlxQcm9ncmFtIEZpbGVzXEJsdWVTdGFja3NfbXNpNSIsDQogICAgIkM6XFByb2dyYW0gRmlsZXNcQmx1ZVN0YWNrc19ueHQiDQopDQoNCiRvcmlnaW5hbE5hbWUgPSAiSEQtUGxheWVyLmV4ZSINCiRuZXdOYW1lID0gIkhELXBsYXllci5leGUiDQoNCmZ1bmN0aW9uIFdyaXRlLUNlbnRlcmVkIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJFRleHQsDQogICAgICAgIFtDb25zb2xlQ29sb3JdJENvbG9yID0gIldoaXRlIg0KICAgICkNCiAgICAkd2lkdGggPSAkSG9zdC5VSS5SYXdVSS5XaW5kb3dTaXplLldpZHRoDQogICAgJHBhZCA9IFtNYXRoXTo6TWF4KDAsIFtNYXRoXTo6Rmxvb3IoKCR3aWR0aCAtICRUZXh0Lkxlbmd0aCkgLyAyKSkNCiAgICBXcml0ZS1Ib3N0ICgiICIgKiAkcGFkKSAtTm9OZXdsaW5lDQogICAgV3JpdGUtSG9zdCAkVGV4dCAtRm9yZWdyb3VuZENvbG9yICRDb2xvcg0KfQ0KDQpmdW5jdGlvbiBTaG93LUJhbm5lciB7DQogICAgQ2xlYXItSG9zdA0KICAgICMgU3BsaXQgQVNDSUkgbGluZSBpbnRvICJGYWlyIiBhbmQgIkNvbW11bml0eSINCiAgICBXcml0ZS1DZW50ZXJlZCAiX19fX19fX19fX18gICAgICAuX18gICAgICAgICAgICAgICAgIF9fX19fX19fXyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuX18gIF9fICAgICAgICAgICIgUmVkDQogICAgV3JpdGUtQ2VudGVyZWQgIlxfICAgX19fX18vX19fXyAgfF9ffF9fX19fX19fXyAgX19fICBcXyAgIF9fXyBcICBfX19fICAgX19fX18gICBfX19fXyAgX18gX18gIF9fX18gfF9ffC8gIHxfIF9fXy5fXy4iIFJlZA0KICAgIFdyaXRlLUNlbnRlcmVkICIgfCAgICBfXykgXF9fICBcIHwgIFxfICBfXyBcICBcLyAgLyAgLyAgICBcICBcLyAvICBfIFwgLyAgICAgXCAvICAgICBcfCAgfCAgXC8gICAgXHwgIFwgICBfXzwgICB8ICB8IiBSZWQNCiAgICBXcml0ZS1DZW50ZXJlZCAiIHwgICAgIFwgICAvIF9fIFx8ICB8fCAgfCBcLz4gICAgPCAgIFwgICAgIFxfX18oICA8Xz4gKSAgWSBZICBcICBZIFkgIFwgIHwgIC8gICB8ICBcICB8fCAgfCAgXF9fXyAgfCIgQmx1ZQ0KICAgIFdyaXRlLUNlbnRlcmVkICIgXF9fXyAgLyAgKF9fX18gIC9fX3x8X198ICAvX18vXF8gXCAgIFxfX19fX18gIC9cX19fXy98X198X3wgIC9fX3xffCAgL19fX18vfF9fX3wgIC9fX3x8X198ICAvIF9fX198IiBCbHVlDQogICAgV3JpdGUtQ2VudGVyZWQgIiAgICAgXC8gICAgICAgIFwvICAgICAgICAgICAgICAgIFwvICAgICAgICAgIFwvICAgICAgICAgICAgIFwvICAgICAgXC8gICAgICAgICAgIFwvICAgICAgICAgIFwvICAgICAiIEJsdWUNCiAgICBXcml0ZS1Ib3N0ICIiDQp9DQoNCmZ1bmN0aW9uIFBhdGNoLVBhbmVsIHsNCiAgICAkYWN0aW9uVGFrZW4gPSAkZmFsc2UNCiAgICBmb3JlYWNoICgkZGlyIGluICR0YXJnZXREaXJzKSB7DQogICAgICAgIGlmIChUZXN0LVBhdGggJGRpcikgew0KICAgICAgICAgICAgJGl0ZW1zID0gR2V0LUNoaWxkSXRlbSAtUGF0aCAkZGlyIC1SZWN1cnNlIC1GaWx0ZXIgJG9yaWdpbmFsTmFtZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KICAgICAgICAgICAgZm9yZWFjaCAoJGl0ZW0gaW4gJGl0ZW1zKSB7DQogICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgUmVuYW1lLUl0ZW0gLVBhdGggJGl0ZW0uRnVsbE5hbWUgLU5ld05hbWUgJG5ld05hbWUgLUZvcmNlDQogICAgICAgICAgICAgICAgICAgICRhY3Rpb25UYWtlbiA9ICR0cnVlDQogICAgICAgICAgICAgICAgfSBjYXRjaCB7fQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KICAgIGlmICgkYWN0aW9uVGFrZW4pIHsNCiAgICAgICAgV3JpdGUtQ2VudGVyZWQgIlBhdGNoIGFwcGxpZWQgc3VjY2Vzc2Z1bGx5LiIgUmVkDQogICAgfSBlbHNlIHsNCiAgICAgICAgV3JpdGUtQ2VudGVyZWQgIkFscmVhZHkgcGF0Y2hlZCBvciBubyBhY3Rpb24gbmVlZGVkLiIgWWVsbG93DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBVbnBhdGNoLVBhbmVsIHsNCiAgICAkYWN0aW9uVGFrZW4gPSAkZmFsc2UNCiAgICBmb3JlYWNoICgkZGlyIGluICR0YXJnZXREaXJzKSB7DQogICAgICAgIGlmIChUZXN0LVBhdGggJGRpcikgew0KICAgICAgICAgICAgJGl0ZW1zID0gR2V0LUNoaWxkSXRlbSAtUGF0aCAkZGlyIC1SZWN1cnNlIC1GaWx0ZXIgJG5ld05hbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICAgICAgICAgIGZvcmVhY2ggKCRpdGVtIGluICRpdGVtcykgew0KICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgIFJlbmFtZS1JdGVtIC1QYXRoICRpdGVtLkZ1bGxOYW1lIC1OZXdOYW1lICRvcmlnaW5hbE5hbWUgLUZvcmNlDQogICAgICAgICAgICAgICAgICAgICRhY3Rpb25UYWtlbiA9ICR0cnVlDQogICAgICAgICAgICAgICAgfSBjYXRjaCB7fQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KICAgIGlmICgkYWN0aW9uVGFrZW4pIHsNCiAgICAgICAgV3JpdGUtQ2VudGVyZWQgIlBhbmVsIHJlc3RvcmVkIHRvIG9yaWdpbmFsIHN0YXRlLiIgQmx1ZQ0KICAgIH0gZWxzZSB7DQogICAgICAgIFdyaXRlLUNlbnRlcmVkICJBbHJlYWR5IGluIG9yaWdpbmFsIHN0YXRlIG9yIG5vdGhpbmcgdG8gZml4LiIgWWVsbG93DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBFeGl0LUNsZWFuIHsNCiAgICB0cnkgew0KICAgICAgICBDbGVhci1IaXN0b3J5IC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgfSBjYXRjaCB7fQ0KICAgIFdyaXRlLUNlbnRlcmVkICJFeGl0aW5nLi4uIiBHcmF5DQogICAgU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAzMDANCiAgICBTdG9wLVByb2Nlc3MgLUlkICRQSUQgLUZvcmNlDQp9DQoNCmZ1bmN0aW9uIFNob3ctTWVudSB7DQogICAgU2hvdy1CYW5uZXINCiAgICBXcml0ZS1DZW50ZXJlZCAiPT09PT09PT09PSBQQU5FTCBGVUNLIE1FTlUgPT09PT09PT09PT0iIFdoaXRlDQogICAgV3JpdGUtQ2VudGVyZWQgIlsxXSBQYXRjaCBQYW5lbCIgUmVkDQogICAgV3JpdGUtQ2VudGVyZWQgIlsyXSBVbnBhdGNoIFBhbmVsIiBCbHVlDQogICAgV3JpdGUtQ2VudGVyZWQgIlswXSBFeGl0IiBHcmF5DQogICAgV3JpdGUtQ2VudGVyZWQgIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iIFdoaXRlDQogICAgV3JpdGUtSG9zdCAiIg0KfQ0KDQojIC0tLSBNYWluIExvb3AgLS0tDQp3aGlsZSAoJHRydWUpIHsNCiAgICBTaG93LU1lbnUNCiAgICAkY2hvaWNlID0gUmVhZC1Ib3N0ICJTZWxlY3QgYW4gb3B0aW9uIg0KDQogICAgc3dpdGNoICgkY2hvaWNlKSB7DQogICAgICAgICIxIiB7IFBhdGNoLVBhbmVsIH0NCiAgICAgICAgIjIiIHsgVW5wYXRjaC1QYW5lbCB9DQogICAgICAgICIwIiB7IEV4aXQtQ2xlYW4gfQ0KICAgICAgICBkZWZhdWx0IHsgV3JpdGUtQ2VudGVyZWQgIkludmFsaWQgaW5wdXQuIFRyeSBhZ2Fpbi4iIFJlZCB9DQogICAgfQ0KDQogICAgV3JpdGUtSG9zdCAiIg0KICAgIFBhdXNlDQogICAgQ2xlYXItSG9zdA0KfQ0K';
$decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($payload));
Invoke-Expression $decoded;
