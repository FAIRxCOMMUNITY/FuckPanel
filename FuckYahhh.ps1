$payload = 'IyBTZXQgdGl0bGUNCiRIb3N0LlVJLlJhd1VJLldpbmRvd1RpdGxlID0gIkNoZWF0RnVja2VyWCAtIEBGYWlyWCBDb21tdW5pdHkiDQoNCiMgQVNDSUkgQXJ0IEJhbm5lcg0KJGFzY2lpID0gQCINCl9fX19fX19fXyAuX18gICAgICAgICAgICAgICAgICAgX18gX19fX19fX19fX18gICAgICAgICAgICAgX18gICAgICAgICAgICAgICAgICAgICAgICAgICAgX19fXyAgX19fDQpcXyAgIF9fXyBcfCAgfF9fICAgX19fXyBfX19fXyBfLyAgfFxfICAgX19fX18vXyBfXyAgIF9fX18gfCAgfCBfXyBfX19fX19fX19fXyAgICAgICAgICAgIFwgICBcLyAgLw0KLyAgICBcICBcL3wgIHwgIFxfLyBfXyBcXF9fICBcXCAgIF9fXCAgICBfXyl8ICB8ICBcXy8gX19fXHwgIHwvIC8vIF9fIFxfICBfXyBcICAgX19fX19fICAgXCAgICAgLyANClwgICAgIFxfX198ICAgWSAgXCAgX19fLyAvIF9fIFx8ICB8IHwgICAgIFwgfCAgfCAgL1wgIFxfX198ICAgIDxcICBfX18vfCAgfCBcLyAgL19fX19fLyAgIC8gICAgIFwgDQogXF9fX19fXyAgL19fX3wgIC9cX19fICA+X19fXyAgL19ffCBcX19fICAvIHxfX19fLyAgXF9fXyAgPl9ffF8gXFxfX18gID5fX3wgICAgICAgICAgICAgIC9fX18vXCAgXA0KICAgICAgICBcLyAgICAgXC8gICAgIFwvICAgICBcLyAgICAgICAgIFwvICAgICAgICAgICAgICBcLyAgICAgXC8gICAgXC8gICAgICAgICAgICAgICAgICAgICAgICBcXy8NCiJADQoNCiMgRGVmaW5lIHBhdGhzDQokZ2hvc3REaXIgPSAiJGVudjpBUFBEQVRBXEhER2hvc3QiDQokZmFrZUV4ZSA9ICIkZ2hvc3REaXJcSEQtUGxheWVyLmV4ZSINCiRzcmNDb2RlID0gIiRnaG9zdERpclxnaG9zdC5jcyINCg0KIyBDb25zb2xlIHdpZHRoDQokY29uc29sZVdpZHRoID0gJEhvc3QuVUkuUmF3VUkuV2luZG93U2l6ZS5XaWR0aA0KDQpmdW5jdGlvbiBXcml0ZS1DZW50ZXJlZCB7DQogICAgcGFyYW0oW3N0cmluZ10kdGV4dCwgW0NvbnNvbGVDb2xvcl0kY29sb3IgPSAiV2hpdGUiKQ0KICAgICRwYWQgPSBbTWF0aF06Ok1heCgwLCBbTWF0aF06OkZsb29yKCgkY29uc29sZVdpZHRoIC0gJHRleHQuTGVuZ3RoKSAvIDIpKQ0KICAgIFdyaXRlLUhvc3QgKCcgJyAqICRwYWQgKyAkdGV4dCkgLUZvcmVncm91bmRDb2xvciAkY29sb3INCn0NCg0KZnVuY3Rpb24gU2hvdy1IZWFkZXIgew0KICAgIENsZWFyLUhvc3QNCiAgICAiYG4iICAjIE9uZSBsaW5lIHRvcCBwYWRkaW5nDQogICAgZm9yZWFjaCAoJGxpbmUgaW4gJGFzY2lpLlNwbGl0KCJgbiIpKSB7DQogICAgICAgIFdyaXRlLUNlbnRlcmVkICRsaW5lIEN5YW4NCiAgICB9DQoNCiAgICAkZGVzYyA9IEAiDQpUaGlzIHRvb2wgcHJvdGVjdHMgeW91ciBzeXN0ZW0gZnJvbSB1bndhbnRlZCBwYW5lbCBpbmplY3Rpb25zIGFuZCBVSSB0YWtlb3ZlcnMuDQpCdWlsdCB3aXRoIGEgc2lsZW50IHByb2Nlc3MgcmVkaXJlY3Rpb24gbWV0aG9kIHRoYXQgbGltaXRzIHByb2Nlc3MgaGlqYWNraW5nLg0KDQpDb21wbGV4IHJ1bnRpbWUgZGVmZW5zZSBsb2dpYyBlbnN1cmVzIGVuaGFuY2VkIHNlY3VyaXR5IHdoaWxlIG1hc2tpbmcgb3BlcmF0aW9ucy4NCk5vdGhpbmcgdmlzaWJsZSwgbm90aGluZyB0cmFjZWFibGUg4oCUIGp1c3QgcmF3IGJsb2NraW5nIHBvd2VyLg0KDQpDaG9vc2UgYW4gb3B0aW9uIHRvIGJlZ2luOg0KIkANCg0KICAgIGZvcmVhY2ggKCRsaW5lIGluICRkZXNjLlNwbGl0KCJgbiIpKSB7DQogICAgICAgIFdyaXRlLUNlbnRlcmVkICRsaW5lIERhcmtHcmF5DQogICAgfQ0KDQogICAgV3JpdGUtQ2VudGVyZWQgIlsxXSBQYXRjaCBQYW5lbCIgR3JheQ0KICAgIFdyaXRlLUNlbnRlcmVkICJbMl0gU2FmZSBFeGl0IiBHcmF5DQogICAgV3JpdGUtSG9zdCAiIg0KfQ0KDQojIEMjIENvZGUgZm9yIGhpZGRlbiBnaG9zdCBwcm9jZXNzDQokY29kZSA9IEAiDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uV2luZG93cy5Gb3JtczsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsNCg0KY2xhc3MgR2hvc3RGb3JtIDogRm9ybQ0Kew0KICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiKV0gc3RhdGljIGV4dGVybiBpbnQgU2hvd1dpbmRvdyhJbnRQdHIgaFduZCwgaW50IG5DbWRTaG93KTsNCiAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIildIHN0YXRpYyBleHRlcm4gaW50IFNldFdpbmRvd0xvbmcoSW50UHRyIGhXbmQsIGludCBuSW5kZXgsIHVpbnQgZHdOZXdMb25nKTsNCiAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIildIHN0YXRpYyBleHRlcm4gdWludCBHZXRXaW5kb3dMb25nKEludFB0ciBoV25kLCBpbnQgbkluZGV4KTsNCg0KICAgIGNvbnN0IGludCBTV19ISURFID0gMDsNCiAgICBjb25zdCBpbnQgR1dMX0VYU1RZTEUgPSAtMjA7DQogICAgY29uc3QgdWludCBXU19FWF9UT09MV0lORE9XID0gMHgwMDAwMDA4MDsNCg0KICAgIFtTVEFUaHJlYWRdDQogICAgc3RhdGljIHZvaWQgTWFpbigpDQogICAgew0KICAgICAgICB2YXIgZm9ybSA9IG5ldyBHaG9zdEZvcm0oKTsNCiAgICAgICAgZm9ybS5Mb2FkICs9IChzLCBlKSA9Pg0KICAgICAgICB7DQogICAgICAgICAgICBJbnRQdHIgaGFuZGxlID0gZm9ybS5IYW5kbGU7DQogICAgICAgICAgICBTaG93V2luZG93KGhhbmRsZSwgU1dfSElERSk7DQogICAgICAgICAgICB1aW50IGV4U3R5bGUgPSBHZXRXaW5kb3dMb25nKGhhbmRsZSwgR1dMX0VYU1RZTEUpOw0KICAgICAgICAgICAgU2V0V2luZG93TG9uZyhoYW5kbGUsIEdXTF9FWFNUWUxFLCBleFN0eWxlIHwgV1NfRVhfVE9PTFdJTkRPVyk7DQogICAgICAgIH07DQogICAgICAgIGZvcm0uU2hvd0luVGFza2JhciA9IGZhbHNlOw0KICAgICAgICBmb3JtLkZvcm1Cb3JkZXJTdHlsZSA9IEZvcm1Cb3JkZXJTdHlsZS5Ob25lOw0KICAgICAgICBmb3JtLk9wYWNpdHkgPSAwOw0KICAgICAgICBBcHBsaWNhdGlvbi5SdW4oZm9ybSk7DQogICAgfQ0KfQ0KIkANCg0KIyBIZWxwZXJzDQpmdW5jdGlvbiBXcml0ZS1Db2RlIHsNCiAgICBpZiAoLW5vdCAoVGVzdC1QYXRoICRnaG9zdERpcikpIHsNCiAgICAgICAgTmV3LUl0ZW0gLUl0ZW1UeXBlIERpcmVjdG9yeSAtUGF0aCAkZ2hvc3REaXIgLUZvcmNlIHwgT3V0LU51bGwNCiAgICB9DQogICAgW0lPLkZpbGVdOjpXcml0ZUFsbFRleHQoJHNyY0NvZGUsICRjb2RlKQ0KfQ0KDQpmdW5jdGlvbiBDb21waWxlLUZha2Ugew0KICAgICRjc2MgPSAiJHtlbnY6V0lORElSfVxNaWNyb3NvZnQuTkVUXEZyYW1ld29ya1x2NC4wLjMwMzE5XGNzYy5leGUiDQogICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAkY3NjKSkgew0KICAgICAgICBXcml0ZS1DZW50ZXJlZCAiWyFdIGNzYy5leGUgbm90IGZvdW5kISIgUmVkDQogICAgICAgIHJldHVybiAkZmFsc2UNCiAgICB9DQogICAgU3RhcnQtUHJvY2VzcyAtV2luZG93U3R5bGUgSGlkZGVuIC1GaWxlUGF0aCAkY3NjIC1Bcmd1bWVudExpc3QgIi90YXJnZXQ6d2luZXhlIiwgIi9vdXQ6YCIkZmFrZUV4ZWAiIiwgImAiJHNyY0NvZGVgIiIgLVdhaXQNCiAgICByZXR1cm4gKFRlc3QtUGF0aCAkZmFrZUV4ZSkNCn0NCg0KZnVuY3Rpb24gU3RhcnQtRmFrZSB7DQogICAgU3RhcnQtUHJvY2VzcyAtV2luZG93U3R5bGUgSGlkZGVuIC1GaWxlUGF0aCAkZmFrZUV4ZQ0KfQ0KDQpmdW5jdGlvbiBDbGVhbnVwLUZpbGVzIHsNCiAgICBHZXQtUHJvY2VzcyAtTmFtZSAiSEQtUGxheWVyIiAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFN0b3AtUHJvY2VzcyAtRm9yY2UgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICBTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDMwMA0KICAgIGlmIChUZXN0LVBhdGggJGZha2VFeGUpIHsgUmVtb3ZlLUl0ZW0gJGZha2VFeGUgLUZvcmNlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIH0NCiAgICBpZiAoVGVzdC1QYXRoICRzcmNDb2RlKSB7IFJlbW92ZS1JdGVtICRzcmNDb2RlIC1Gb3JjZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB9DQogICAgaWYgKChUZXN0LVBhdGggJGdob3N0RGlyKSAtYW5kICgoR2V0LUNoaWxkSXRlbSAkZ2hvc3REaXIpLkNvdW50IC1lcSAwKSkgew0KICAgICAgICBSZW1vdmUtSXRlbSAkZ2hvc3REaXIgLUZvcmNlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgfQ0KfQ0KDQojIE1haW4NCndoaWxlICgkdHJ1ZSkgew0KICAgIFNob3ctSGVhZGVyDQoNCiAgICAjIElubGluZSBpbnB1dA0KICAgICRwcm9tcHQgPSAiPj4+IENob29zZSBvcHRpb24gKDEgb3IgMik6ICINCiAgICAkcGFkID0gW01hdGhdOjpNYXgoMCwgW01hdGhdOjpGbG9vcigoJGNvbnNvbGVXaWR0aCAtICRwcm9tcHQuTGVuZ3RoIC0gMikgLyAyKSkgICMgLTIgcGFkZGluZw0KICAgIFdyaXRlLUhvc3QgKCcgJyAqICRwYWQgKyAkcHJvbXB0KSAtTm9OZXdsaW5lIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQogICAgJGNob2ljZSA9IFJlYWQtSG9zdA0KDQogICAgc3dpdGNoICgkY2hvaWNlKSB7DQogICAgICAgICIxIiB7DQogICAgICAgICAgICBXcml0ZS1Db2RlDQogICAgICAgICAgICBpZiAoQ29tcGlsZS1GYWtlKSB7DQogICAgICAgICAgICAgICAgU3RhcnQtRmFrZQ0KICAgICAgICAgICAgICAgIFdyaXRlLUNlbnRlcmVkICJbaW5mb10gQWxsIFBhbmVscyBhcmUgbm93IFBhdGNoZWQhIiBHcmVlbg0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBXcml0ZS1DZW50ZXJlZCAiWyFdIFVuZXhwZWN0ZWQgRXJyb3IuIENvbnRhY3QgRGV2ICEhIiBSZWQNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICAiMiIgew0KICAgICAgICAgICAgQ2xlYW51cC1GaWxlcw0KICAgICAgICAgICAgV3JpdGUtQ2VudGVyZWQgIltpbmZvXSBTYWZlIEV4aXQ6IFN5c3RlbSByZXR1cm4gVG8gTm9ybWFsLiIgRGFya0dyZWVuDQogICAgICAgICAgICBicmVhaw0KICAgICAgICB9DQogICAgICAgIGRlZmF1bHQgew0KICAgICAgICAgICAgV3JpdGUtQ2VudGVyZWQgIlshXSBJbnZhbGlkIGNob2ljZS4iIFJlZA0KICAgICAgICB9DQogICAgfQ0KDQogICAgV3JpdGUtSG9zdCAiIg0KICAgIFdyaXRlLUNlbnRlcmVkICJQcmVzcyBFTlRFUiB0byByZXR1cm4gdG8gbWFpbiBtZW51Li4uIiBEYXJrR3JheQ0KICAgIFt2b2lkXVtTeXN0ZW0uQ29uc29sZV06OlJlYWRMaW5lKCkNCn0NCg==';
$decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($payload));
Invoke-Expression $decoded
